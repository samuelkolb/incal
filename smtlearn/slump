import csv


def import_slump():
    with open('/Users/Elias/Desktop/slump_test.data.txt', newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=',', quotechar='|')
        linecount=0
        l=[]
        for row in spamreader:
            if linecount>0:
                row = [float(x) for x in row]
                row[8], row[1] = row[1], row[8]
                l.append(row[1:9])
            else:
                row[8],row[1]=row[1],row[8]
                header=row[1:9]
            linecount+=1
    return l,header

data,head=import_slump()

def multi(data):

    def normilisation(x,min,max,p):
        return (x-min[p])/(max[p]-min[p])

    minn=list(map(min, zip(*data)))
    maxx=list(map(max, zip(*data)))

    for i in data:
        for j in range(1,len(i)):
            i[j]=normilisation(i[j],minn,maxx,j)

    for i in data:
        lenn=len(i)
        for j in range(1,lenn):
            for k in range(j,lenn):
                i.append(i[j]*i[k])
    for i in data:
        if i[0]*10>=10 and i[0]*10<=40:
            i[0]=1
        elif i[0]*10>=50 and i[0]*10<=90:
            i[0]=2
        elif i[0]*10>=100 and i[0]*10<=150:
            i[0]=3
        elif i[0]*10>=160 and i[0]*10<=210:
            i[0]=4
        elif i[0]*10>=220:
            i[0]=5
        else:
            data.remove(i)


    return data

def header(head):
    new=head[:]
    for i in range(1,len(head)):
        for j in range(i,len(head)):

            new.append(head[i]+head[j])
    return new

def merge(head,data):
    l=[]
    for i in data:
        l.append(dict(zip(head, i)))

    return l

def classification(cl,data):
    l=[]
    for i in data:
        if i[0]==cl:
            l.append((i,True))
        else:
            l.append((i,False))
    return l

def slamp(lenght):

    data,head=import_slump()
    labeled=classification(1,data)
    random.shuffle(labeled)

    train=labeled[:lenght]
    test=labeled[lenght:]

    variables=[]
    var_types={}
    var_domains={}
    for i in head:
        variables.append(i[1:-1])
        var_types[i[1:-1]]= REAL
        var_domains[i[1:-1]]=(0,1)
    domain = Domain(variables, var_types, var_domains)
    problem=Problem(domain, 0, "wine")
    theory ,km,hm= learn_parameter_free(problem, train,3)
    a=accucy(theorylearned=theory,data1=test)
    print(a)
    return theory,a